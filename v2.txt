<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">path to driver.exe of the relevant browser</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
 

import org.openqa.selenium.interactions.Actions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions

import io.github.bonigarcia.wdm.WebDriverManager
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.chrome.ChromeOptions

import java.time.Duration

WebDriverManager.chromedriver().setup()

ChromeOptions options = new ChromeOptions()
options.addArguments(&quot;--start-maximized&quot;)
options.addArguments(&quot;--disable-gpu&quot;)
options.addArguments(&quot;--no-sandbox&quot;)
options.addArguments(&quot;--disable-dev-shm-usage&quot;)

def driver = new ChromeDriver(options)

// Use `driver` directly in this script
driver.get(&quot;https://test-crm--fullsbx.sandbox.my.salesforce.com/&quot;)

// Do NOT try to store `driver` in `vars`
 

// Store WebDriver in JMeter variable (This will allow access from JSR223 Assertion)
//vars.put(&quot;driver&quot;, driver)
log.info(&quot;WebDriver setup complete and browser window maximized.&quot;)

// Step 1: Open the URL
driver.get(&quot;https://test-crm--fullsbx.sandbox.my.salesforce.com/&quot;)
log.info(&quot;Navigated to URL: https://test-crm--fullsbx.sandbox.my.salesforce.com/&quot;)

// Step 2: Set window size (optional)
driver.manage().window().setSize(new org.openqa.selenium.Dimension(1552, 840))
log.info(&quot;Window size set to 1552x840.&quot;)

// Step 3: Enter username
WebElement usernameField = driver.findElement(By.id(&quot;username&quot;))
usernameField.click()
usernameField.sendKeys(&quot;testuser_m_con@testhub.org.fullsbx&quot;)
log.info(&quot;Entered username.&quot;)

 // Step 4: Enter password
WebElement passwordField = driver.findElement(By.id(&quot;password&quot;))
passwordField.click()
passwordField.sendKeys(&quot;test@1&quot;)
log.info(&quot;Entered password.&quot;)

// Step 5: Click Login button
WebElement loginButton = driver.findElement(By.id(&quot;Login&quot;))
loginButton.click()
log.info(&quot;Clicked Login button.&quot;)

// Optional: Wait for login to complete (you can adjust the sleep time based on your requirements)
Thread.sleep(20000) 
log.info(&quot;Waiting for login to complete.&quot;)

// Step 6: Click on &quot;Patient Data&quot; tab
WebElement patientDataTab = driver.findElement(By.xpath(&quot;//a[contains(text(),&apos;Patient Data&apos;)]&quot;))
patientDataTab.click()
log.info(&quot;Clicked on &apos;Patient Data&apos; tab.&quot;)

// Step 7: Click on &quot;Authorizations&quot; tab
WebElement authorizationsTab = driver.findElement(By.xpath(&quot;//a[contains(text(),&apos;Authorizations&apos;)]&quot;))
authorizationsTab.click()
log.info(&quot;Clicked on &apos;Authorizations&apos; tab.&quot;)

// Optional: Wait for page to load (Adjust as needed)
Thread.sleep(5000) 
log.info(&quot;Waiting for Authorizations tab to load.&quot;)

// Step 8: Click on a button within Authorizations
WebElement button = driver.findElement(By.xpath(&quot;(//button[@type=&apos;button&apos;])[50]&quot;))
button.click()
log.info(&quot;Clicked on a button within Authorizations.&quot;)

// Step 9: Mouse over the button
Actions actions = new Actions(driver)
actions.moveToElement(button).perform()
log.info(&quot;Mouse moved over the button.&quot;)

// Step 10: Mouse out from the button
actions.moveByOffset(50, 50).perform()
log.info(&quot;Mouse moved out from the button.&quot;)

// Optional: Sleep for an extra time to simulate waiting for page loading
Thread.sleep(5000) 
log.info(&quot;Waiting for page to load after mouse out.&quot;)

// Assert Element and Load Time - JSR223 Assertion Logic

// Get the locator type and name from JMeter variables (LocatorType and LocatorName)
String locatorType = &quot;Xpath&quot;  // Or dynamically set it from JMeter variables
String locatorName = &quot;//flexipage-tab2[@id=&apos;tab-10&apos;]/slot/flexipage-component2/slot/c-combined-authorization-data-l-w-c/lightning-card/article/div[2]/slot/div/lightning-datatable/div[2]/div/div/table/tbody/tr/th/lightning-primitive-cell-factory/span&quot;

// Record start time
long startTime = System.currentTimeMillis()
log.info(&quot;Start time: &quot; + startTime)

// WebDriverWait to check element presence and visibility

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15))

//WebDriverWait wait = new WebDriverWait(driver, 15)
boolean elementPresent = false
try {
    WebElement element = null
    if (&quot;ID&quot;.equalsIgnoreCase(locatorType)) {
        element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(locatorName)))
    } else if (&quot;Xpath&quot;.equalsIgnoreCase(locatorType)) {
        element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(locatorName)))
    } else {
        throw new Exception(&quot;Invalid Locator Type&quot;)
    }

    // Check if the element is displayed
    if (element != null &amp;&amp; element.isDisplayed()) {
        elementPresent = true
    }

    // Calculate load time
    long endTime = System.currentTimeMillis()
    long loadTime = endTime - startTime
    String formattedLoadTime = formatLoadTime(loadTime)

    // Log load time
    log.info(&quot;End time: &quot; + endTime)
    log.info(&quot;Load time: &quot; + formattedLoadTime)

} catch (Exception e) {
    // If element not found or any error occurs, fail the test
    elementPresent = false
    log.info(&quot;Error occurred: &quot; + e.getMessage())
}

// Assert whether element is present and visible

if (vars.get(&quot;elementVisible&quot;) == &quot;false&quot;) 
	{
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Element is not present or visible after loading.&quot;)
}


// Format the load time to a readable format
def formatLoadTime(long loadTime) {
    if (loadTime &gt;= 60000) {
        long minutes = loadTime / 60000
        return minutes + &quot; minute(s)&quot;
    } else if (loadTime &gt;= 1000) {
        long seconds = loadTime / 1000
        return seconds + &quot; second(s)&quot;
    } else {
        return loadTime + &quot; millisecond(s)&quot;
    }
}

// Optional: Close the driver after the test
driver.quit()
log.info(&quot;Test completed and WebDriver closed.&quot;)
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
 

import org.openqa.selenium.interactions.Actions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions

import io.github.bonigarcia.wdm.WebDriverManager
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.chrome.ChromeOptions

import java.time.Duration

WebDriverManager.chromedriver().setup()

ChromeOptions options = new ChromeOptions()
options.addArguments(&quot;--start-maximized&quot;)
options.addArguments(&quot;--disable-gpu&quot;)
options.addArguments(&quot;--no-sandbox&quot;)
options.addArguments(&quot;--disable-dev-shm-usage&quot;)

def driver = new ChromeDriver(options)

// Use `driver` directly in this script
driver.get(&quot;https://test-crm--fullsbx.sandbox.my.salesforce.com/&quot;)

// Do NOT try to store `driver` in `vars`
 

// Store WebDriver in JMeter variable (This will allow access from JSR223 Assertion)
//vars.put(&quot;driver&quot;, driver)
log.info(&quot;WebDriver setup complete and browser window maximized.&quot;)

// Step 1: Open the URL
driver.get(&quot;https://test-crm--fullsbx.sandbox.my.salesforce.com/&quot;)
log.info(&quot;Navigated to URL: https://test-crm--fullsbx.sandbox.my.salesforce.com/&quot;)

// Step 2: Set window size (optional)
driver.manage().window().setSize(new org.openqa.selenium.Dimension(1552, 840))
log.info(&quot;Window size set to 1552x840.&quot;)

// Step 3: Enter username
WebElement usernameField = driver.findElement(By.id(&quot;username&quot;))
usernameField.click()
usernameField.sendKeys(&quot;testuser_m_con@testhub.org.fullsbx&quot;)
log.info(&quot;Entered username.&quot;)

 // Step 4: Enter password
WebElement passwordField = driver.findElement(By.id(&quot;password&quot;))
passwordField.click()
passwordField.sendKeys(&quot;test@1&quot;)
log.info(&quot;Entered password.&quot;)

// Step 5: Click Login button
WebElement loginButton = driver.findElement(By.id(&quot;Login&quot;))
loginButton.click()
log.info(&quot;Clicked Login button.&quot;)

// Optional: Wait for login to complete (you can adjust the sleep time based on your requirements)
Thread.sleep(20000) 
log.info(&quot;Waiting for login to complete.&quot;)

// Step 6: Click on &quot;Patient Data&quot; tab
WebElement patientDataTab = driver.findElement(By.xpath(&quot;//a[contains(text(),&apos;Patient Data&apos;)]&quot;))
patientDataTab.click()
log.info(&quot;Clicked on &apos;Patient Data&apos; tab.&quot;)

// Step 7: Click on &quot;Authorizations&quot; tab
WebElement authorizationsTab = driver.findElement(By.xpath(&quot;//a[contains(text(),&apos;Authorizations&apos;)]&quot;))
authorizationsTab.click()
log.info(&quot;Clicked on &apos;Authorizations&apos; tab.&quot;)

// Optional: Wait for page to load (Adjust as needed)
Thread.sleep(5000) 
log.info(&quot;Waiting for Authorizations tab to load.&quot;)

// Step 8: Click on a button within Authorizations
WebElement button = driver.findElement(By.xpath(&quot;(//button[@type=&apos;button&apos;])[50]&quot;))
button.click()
log.info(&quot;Clicked on a button within Authorizations.&quot;)

// Step 9: Mouse over the button
Actions actions = new Actions(driver)
actions.moveToElement(button).perform()
log.info(&quot;Mouse moved over the button.&quot;)

// Step 10: Mouse out from the button
actions.moveByOffset(50, 50).perform()
log.info(&quot;Mouse moved out from the button.&quot;)

// Optional: Sleep for an extra time to simulate waiting for page loading
Thread.sleep(5000) 
log.info(&quot;Waiting for page to load after mouse out.&quot;)

// Assert Element and Load Time - JSR223 Assertion Logic

// Get the locator type and name from JMeter variables (LocatorType and LocatorName)
String locatorType = &quot;Xpath&quot;  // Or dynamically set it from JMeter variables
String locatorName = &quot;//flexipage-tab2[@id=&apos;tab-10&apos;]/slot/flexipage-component2/slot/c-combined-authorization-data-l-w-c/lightning-card/article/div[2]/slot/div/lightning-datatable/div[2]/div/div/table/tbody/tr/th/lightning-primitive-cell-factory/span&quot;

// Record start time
long startTime = System.currentTimeMillis()
log.info(&quot;Start time: &quot; + startTime)

// WebDriverWait to check element presence and visibility

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15))

//WebDriverWait wait = new WebDriverWait(driver, 15)
boolean elementPresent = false
try {
    WebElement element = null
    if (&quot;ID&quot;.equalsIgnoreCase(locatorType)) {
        element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(locatorName)))
    } else if (&quot;Xpath&quot;.equalsIgnoreCase(locatorType)) {
        element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(locatorName)))
    } else {
        throw new Exception(&quot;Invalid Locator Type&quot;)
    }

    // Check if the element is displayed
    if (element != null &amp;&amp; element.isDisplayed()) {
        elementPresent = true
    }

    // Calculate load time
    long endTime = System.currentTimeMillis()
    long loadTime = endTime - startTime
    String formattedLoadTime = formatLoadTime(loadTime)

    // Log load time
    log.info(&quot;End time: &quot; + endTime)
    log.info(&quot;Load time: &quot; + formattedLoadTime)

} catch (Exception e) {
    // If element not found or any error occurs, fail the test
    elementPresent = false
    log.info(&quot;Error occurred: &quot; + e.getMessage())
}

// Assert whether element is present and visible

if (vars.get(&quot;elementVisible&quot;) == &quot;false&quot;) 
	{
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Element is not present or visible after loading.&quot;)
}


// Format the load time to a readable format
def formatLoadTime(long loadTime) {
    if (loadTime &gt;= 60000) {
        long minutes = loadTime / 60000
        return minutes + &quot; minute(s)&quot;
    } else if (loadTime &gt;= 1000) {
        long seconds = loadTime / 1000
        return seconds + &quot; second(s)&quot;
    } else {
        return loadTime + &quot; millisecond(s)&quot;
    }
}

// Optional: Close the driver after the test
driver.quit()
log.info(&quot;Test completed and WebDriver closed.&quot;)
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
