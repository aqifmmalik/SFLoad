// Use WDS (WebDriverSampler) variables for proper JMeter integration.
// WDS.sampleResult: Use to mark the sampler as passed or failed.
// WDS.log: Use to write messages to the jmeter.log file.
// WDS.browser: This is the WebDriver instance managed by the Chrome Driver Config.

// --- Step 1: Start the Sampler and Open URL ---
// This command starts the timer for the sampler.
WDS.sampleResult.sampleStart()
WDS.log.info("Starting Login Sampler")

// The browser is already opened by the Chrome Driver Config.
// We just need to navigate to the URL.
WDS.browser.get("https://test-crm--fullsbx.sandbox.my.salesforce.com/")
WDS.log.info("Navigated to Salesforce URL.")

// Import necessary classes
import org.openqa.selenium.By
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration

// Create a wait object to be reused throughout the script. 30 seconds is a reasonable timeout.
def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(30))

try {
    // --- Step 2: Login ---
    WDS.log.info("Attempting to log in...")
    
    // Wait for username field to be visible before interacting
    def usernameField = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("username")))
    usernameField.sendKeys("testuser_m_con@testhub.org.fullsbx")
    
    // No need to wait for password field, it's already loaded
    WDS.browser.findElement(By.id("password")).sendKeys("test@1")
    WDS.browser.findElement(By.id("Login")).click()
    WDS.log.info("Login form submitted.")

    // --- Step 3: Navigate to Authorizations ---
    // Instead of Thread.sleep(), wait for a known element on the next page.
    // Let's wait for the "Patient Data" tab to be clickable.
    def patientDataTab = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a/span[text()='Patient Data']")))
    patientDataTab.click()
    WDS.log.info("Clicked on 'Patient Data' tab.")

    // Now wait for the "Authorizations" tab to be clickable
    def authorizationsTab = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a/span[text()='Authorizations']")))
    authorizationsTab.click()
    WDS.log.info("Clicked on 'Authorizations' tab.")

    // --- Step 4: Interact with Elements on the Authorizations Page ---
    // Wait for the page content to load by waiting for a table or a known container.
    // NOTE: The locator "(//button[@type='button'])[50]" is very unstable.
    // You should find a more reliable locator, like one with a unique ID, name, or data-test-id attribute.
    // For this example, we will proceed but this is a major risk for script failure.
    def specificButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//button[@type='button'])[50]")))
    specificButton.click()
    WDS.log.info("Clicked on the specific button.")

    // --- Step 5: Assert Element is Visible and Measure Load Time ---
    // Record start time for this specific measurement
    long loadTimeStart = System.currentTimeMillis()
    WDS.log.info("Starting final element visibility check...")
    
    // The XPath you provided is very long and fragile. If possible, shorten it.
    def finalElementLocator = By.xpath("//flexipage-tab2[@id='tab-10']//lightning-datatable//tbody/tr[1]/th/lightning-primitive-cell-factory/span")
    
    // Wait for the final element to be visible
    wait.until(ExpectedConditions.visibilityOfElementLocated(finalElementLocator))
    
    // If the line above doesn't throw a TimeoutException, the element was found.
    long loadTimeEnd = System.currentTimeMillis()
    long loadTime = loadTimeEnd - loadTimeStart
    
    WDS.log.info("SUCCESS: Final element was found and is visible.")
    WDS.log.info("Element load time: " + loadTime + " ms.")
    
    // You can store the load time as a custom variable if needed for reports
    vars.put("elementLoadTime", String.valueOf(loadTime))

    // Mark the Sampler as successful
    WDS.sampleResult.setSuccessful(true)
    WDS.sampleResult.setResponseMessage("Successfully logged in and verified element.")
    
} catch (Exception e) {
    // If any 'wait' fails or any other exception occurs, this block will execute.
    WDS.log.error("Script failed: " + e.getMessage())
    
    // Mark the Sampler as failed
    WDS.sampleResult.setSuccessful(false)
    WDS.sampleResult.setResponseMessage("Failure: " + e.getMessage())
} finally {
    // This command stops the timer for the sampler.
    // It's crucial to put this in a 'finally' block to ensure it always runs.
    WDS.sampleResult.sampleEnd()

    // DO NOT call WDS.browser.quit() here.
    // The Chrome Driver Config will handle closing the browser at the end of the thread's iteration.
}
