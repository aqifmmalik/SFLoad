<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Salesforce Timed Filter Test (FINAL)">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Salesforce User">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">C:\JMeter\chromedriver.exe</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">0</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">0</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">0</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">0</intProp>
          <stringProp name="WebDriverConfig.no_proxy"></stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.log.info(&quot;Starting Login Sampler&quot;)
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.io.File

def takeScreenshot(label) {
    try {
        def baseDir = &quot;C:\\Jmeter\\&quot;
        def today = LocalDate.now()
        def monthName = today.format(DateTimeFormatter.ofPattern(&quot;MMMM&quot;)) // e.g., &quot;June&quot;
        def dateFolderName = today.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)) // e.g., &quot;2025-06-16&quot;
        def fullDirPath = baseDir + monthName + &quot;\\&quot; + dateFolderName + &quot;\\&quot;
	   def dir = new File(fullDirPath)
        if (!dir.exists()) {
            dir.mkdirs()
            WDS.log.info(&quot;Created directory: &quot; + fullDirPath)
        }
        def fileName = label + &quot;_&quot; + System.currentTimeMillis() + &quot;.png&quot;
        def fullFilePath = fullDirPath + fileName
        byte[] screenshot = WDS.browser.getScreenshotAs(OutputType.BYTES)
        def screenshotFile = new File(fullFilePath)
        screenshotFile.bytes = screenshot
        WDS.log.info(&quot;Screenshot saved to: &quot; + fullFilePath)
        WDS.sampleResult.setResponseData(screenshot)
        WDS.sampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.BINARY)

    } catch (Exception e) {
        WDS.log.error(&quot;Failed to take or save screenshot for &quot; + label + &quot;: &quot; + e.getMessage())
    }
}

try {
    def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(120))
    WDS.browser.get(&quot;https://testhealth-crm--fullsbx.sandbox.my.salesforce.com/&quot;)
    WDS.log.info(&quot;Navigated to Salesforce URL.&quot;)
    def usernameField = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;username&quot;)))
    usernameField.sendKeys(&quot;aqif_m_con@testhealthhub.org.fullsbx&quot;)
    WDS.browser.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;testHealth@1&quot;)
    WDS.browser.findElement(By.id(&quot;Login&quot;)).click()
    WDS.log.info(&quot;Login form submitted.&quot;)
    WDS.log.info(&quot;Waiting for the Case Record Page to load...&quot;)
    def patientDataTabLocator = By.xpath(&quot;//div[contains(@class, &apos;slds-tabs_card&apos;)]//a[@data-label=&apos;Patient Data&apos;]&quot;)
    wait.until(ExpectedConditions.elementToBeClickable(patientDataTabLocator))
    WDS.log.info(&quot;Login successful. Case Record Page is loaded.&quot;)
    takeScreenshot(&quot;After_Login_Success&quot;)
    WDS.sampleResult.setSuccessful(true)
    WDS.sampleResult.setResponseMessage(&quot;Login successful.&quot;)

} catch (Exception e) {
    takeScreenshot(&quot;Login_FAILED&quot;)
    WDS.log.error(&quot;Login Sampler failed: &quot; + e.getMessage(), e)
    WDS.sampleResult.setSuccessful(false)
    WDS.sampleResult.setResponseMessage(&quot;Failure: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Authorizations" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.log.info(&quot;Starting Navigation Sampler&quot;)
import org.openqa.selenium.By
import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.OutputType
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.io.File

def takeScreenshot(label) {
    try {
        def baseDir = &quot;C:\\Jmeter\\&quot;
        def today = LocalDate.now()
        def monthName = today.format(DateTimeFormatter.ofPattern(&quot;MMMM&quot;))
        def dateFolderName = today.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;))
        def fullDirPath = baseDir + monthName + &quot;\\&quot; + dateFolderName + &quot;\\&quot;
        def dir = new File(fullDirPath)
        if (!dir.exists()) { dir.mkdirs() }
        def fileName = label + &quot;_&quot; + System.currentTimeMillis() + &quot;.png&quot;
        def fullFilePath = fullDirPath + fileName
        byte[] screenshot = WDS.browser.getScreenshotAs(OutputType.BYTES)
        def screenshotFile = new File(fullFilePath)
        screenshotFile.bytes = screenshot
        WDS.log.info(&quot;Screenshot saved to: &quot; + fullFilePath)
        WDS.sampleResult.setResponseData(screenshot)
        WDS.sampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.BINARY)

    } catch (Exception e) {
        WDS.log.error(&quot;Failed to take or save screenshot for &quot; + label + &quot;: &quot; + e.getMessage())
    }
}

try {
    def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(120))
    JavascriptExecutor js = (JavascriptExecutor) WDS.browser
    def patientDataTabLocator = By.xpath(&quot;//div[contains(@class, &apos;slds-tabs_card&apos;)]//a[@data-label=&apos;Patient Data&apos;]&quot;)
    def patientDataTab = wait.until(ExpectedConditions.elementToBeClickable(patientDataTabLocator))
    patientDataTab.click()
    WDS.log.info(&quot;Clicked &apos;Patient Data&apos; tab.&quot;)

    // Navigate to Authorizations 
    def authorizationsSubTabLocator = By.xpath(&quot;//div[contains(@class, &apos;slds-tabs_card&apos;)]//a[@data-label=&apos;Authorizations&apos;]&quot;)
    def authorizationsSubTab = wait.until(ExpectedConditions.presenceOfElementLocated(authorizationsSubTabLocator))
    js.executeScript(&quot;arguments[0].click();&quot;, authorizationsSubTab)
    WDS.log.info(&quot;Clicked on &apos;Authorizations&apos; sub-tab using JavaScript.&quot;)
    def applyFilterButtonLocator = By.xpath(&quot;//c-combined-authorization-data-l-w-c//button[text()=&apos;Apply Filter&apos;]&quot;)
    wait.until(ExpectedConditions.elementToBeClickable(applyFilterButtonLocator))
    WDS.log.info(&quot;Successfully navigated to Authorizations tab.&quot;)
    takeScreenshot(&quot;After_Navigation_Success&quot;)
    WDS.sampleResult.setSuccessful(true)
    WDS.sampleResult.setResponseMessage(&quot;Navigation to Authorizations successful.&quot;)

} catch (Exception e) {
    takeScreenshot(&quot;Navigation_FAILED&quot;)
    WDS.log.error(&quot;Navigation Sampler failed: &quot; + e.getMessage(), e)
    WDS.sampleResult.setSuccessful(false)
    WDS.sampleResult.setResponseMessage(&quot;Failure: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Measure No Filter">
          <stringProp name="WebDriverSampler.script">WDS.log.info(&quot;Starting Filter and Measure Sampler&quot;)
import org.openqa.selenium.By
import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.OutputType
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.io.File

def takeScreenshot(label) {
    try {
        def baseDir = &quot;C:\\Jmeter\\&quot;
        def today = LocalDate.now()
        def monthName = today.format(DateTimeFormatter.ofPattern(&quot;MMMM&quot;))
        def dateFolderName = today.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;))
        def fullDirPath = baseDir + monthName + &quot;\\&quot; + dateFolderName + &quot;\\&quot;

        def dir = new File(fullDirPath)
        if (!dir.exists()) { dir.mkdirs() }

        def fileName = label + &quot;_&quot; + System.currentTimeMillis() + &quot;.png&quot;
        def fullFilePath = fullDirPath + fileName

        byte[] screenshot = WDS.browser.getScreenshotAs(OutputType.BYTES)
        def screenshotFile = new File(fullFilePath)
        screenshotFile.bytes = screenshot
        WDS.log.info(&quot;Screenshot saved to: &quot; + fullFilePath)

        WDS.sampleResult.setResponseData(screenshot)
        WDS.sampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.BINARY)

    } catch (Exception e) {
        WDS.log.error(&quot;Failed to take or save screenshot for &quot; + label + &quot;: &quot; + e.getMessage())
    }
}

try {
    def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(120))
    JavascriptExecutor js = (JavascriptExecutor) WDS.browser
    def applyFilterButtonLocator = By.xpath(&quot;//c-combined-authorization-data-l-w-c//button[text()=&apos;No Filter&apos;]&quot;)
    def applyFilterButton = wait.until(ExpectedConditions.presenceOfElementLocated(applyFilterButtonLocator))
    WDS.log.info(&quot;Found &apos;Apply No Filter&apos; button. Starting timer and clicking now.&quot;)
    long startTime = System.nanoTime() 
    js.executeScript(&quot;arguments[0].click();&quot;, applyFilterButton)
    
    // Wait for data to appear and stop the timer ---
    def dataRowLocator = By.xpath(&quot;//lightning-datatable//tbody/tr[1]&quot;)
    wait.until(ExpectedConditions.visibilityOfElementLocated(dataRowLocator))
    long endTime = System.nanoTime()
    WDS.log.info(&quot;First row of data has appeared. Stopping timer.&quot;)
    
    // Calculate, report the time, and take final screenshot ---
    long durationNanos = endTime - startTime
    long durationMicros = durationNanos / 1000
    WDS.log.info(&quot;------------------------------------------------------&quot;)
    WDS.log.info(&quot;Data load time after filter: &quot; + durationMicros + &quot; microseconds.&quot;)
    WDS.log.info(&quot;------------------------------------------------------&quot;)
    takeScreenshot(&quot;After_Data_Load_Success&quot;)
    WDS.vars.put(&quot;dataLoadTimeMicros&quot;, String.valueOf(durationMicros))
    WDS.sampleResult.setSuccessful(true)
    WDS.sampleResult.setResponseMessage(&quot;Data loaded successfully in &quot; + durationMicros + &quot; microseconds.&quot;)
    
} catch (Exception e) {
    takeScreenshot(&quot;Filter_Measure_FAILED&quot;)
    WDS.log.error(&quot;Filter/Measure Sampler failed: &quot; + e.getMessage(), e)
    WDS.sampleResult.setSuccessful(false)
    WDS.sampleResult.setResponseMessage(&quot;Failure: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Measure Filter" enabled="false">
          <stringProp name="WebDriverSampler.script">// Sampler 3: Clicks &quot;No Filter&quot; and Measures - DEFINITIVE SIMPLIFIED VERSION

WDS.log.info(&quot;Starting &apos;No Filter&apos; and Measure Sampler&quot;)

// --- Imports needed for all logic ---
import org.openqa.selenium.By
import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.OutputType
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.io.File

// --- Helper function to take screenshot ---
def takeScreenshot(label) {
    try {
        def baseDir = &quot;C:\\Jmeter\\&quot;
        def today = LocalDate.now()
        def monthName = today.format(DateTimeFormatter.ofPattern(&quot;MMMM&quot;))
        def dateFolderName = today.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;))
        def fullDirPath = baseDir + monthName + &quot;\\&quot; + dateFolderName + &quot;\\&quot;

        def dir = new File(fullDirPath)
        if (!dir.exists()) { dir.mkdirs() }

        def fileName = label + &quot;_&quot; + System.currentTimeMillis() + &quot;.png&quot;
        def fullFilePath = fullDirPath + fileName

        byte[] screenshot = WDS.browser.getScreenshotAs(OutputType.BYTES)
        def screenshotFile = new File(fullFilePath)
        screenshotFile.bytes = screenshot
        WDS.log.info(&quot;Screenshot saved to: &quot; + fullFilePath)

        WDS.sampleResult.setResponseData(screenshot)
        WDS.sampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.BINARY)

    } catch (Exception e) {
        WDS.log.error(&quot;Failed to take or save screenshot for &quot; + label + &quot;: &quot; + e.getMessage())
    }
}

// Helper function to check if an element is currently displayed
def isElementPresent(locator) {
    try {
        return !WDS.browser.findElements(locator).isEmpty() &amp;&amp; WDS.browser.findElement(locator).isDisplayed()
    } catch (e) {
        return false
    }
}


try {
    def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(120))
    JavascriptExecutor js = (JavascriptExecutor) WDS.browser

    // --- REMOVED all logic for finding/clicking the filter toggle button ---
	Thread.sleep(10000)
    // --- Step 1: Find the &quot;No Filter&quot; button directly and click it ---
    // Using a robust CSS selector based on the button&apos;s class.
    def noFilterButtonLocator = By.cssSelector(&quot;.slds-button.slds-button_outline-brand&quot;)
    WDS.log.info(&quot;Waiting directly for the &apos;No Filter&apos; button to be clickable...&quot;)
    def noFilterButton = wait.until(ExpectedConditions.elementToBeClickable(noFilterButtonLocator))
    
    WDS.log.info(&quot;Found &apos;No Filter&apos; button. Starting timer and clicking now.&quot;)
    long startTime = System.nanoTime() 
    
    // Using a JS click for maximum stability against any potential interception
    js.executeScript(&quot;arguments[0].click();&quot;, noFilterButton)
    
    // --- Step 2: INTELLIGENT WAIT for the table to refresh ---
    def dataRowLocator = By.xpath(&quot;//lightning-datatable//tbody/tr[1]&quot;)
    def noDataLocator = By.xpath(&quot;//*[text()=&apos;No items to display.&apos;]&quot;)
    
    WDS.log.info(&quot;Waiting for the data table to refresh after clicking &apos;No Filter&apos;...&quot;)
    wait.until(ExpectedConditions.or(
        ExpectedConditions.visibilityOfElementLocated(dataRowLocator),
        ExpectedConditions.visibilityOfElementLocated(noDataLocator)
    ))

    long endTime = System.nanoTime()
    WDS.log.info(&quot;A result (either data or an empty message) has appeared. Stopping timer.&quot;)
    
    // --- Step 3: Calculate time and determine the result ---
    long durationNanos = endTime - startTime
    long durationMicros = durationNanos / 1000
    
    WDS.log.info(&quot;------------------------------------------------------&quot;)
    WDS.log.info(&quot;Data reload time after clicking &apos;No Filter&apos;: &quot; + durationMicros + &quot; microseconds.&quot;)
    WDS.log.info(&quot;------------------------------------------------------&quot;)
    
    WDS.vars.put(&quot;dataLoadTimeMicros&quot;, String.valueOf(durationMicros))

    // --- Step 4: Report success based on what was found ---
    String successMessage
    if (isElementPresent(dataRowLocator)) {
        successMessage = &quot;Data reloaded successfully in &quot; + durationMicros + &quot; microseconds.&quot;
        WDS.log.info(&quot;SUCCESS: Data was found in the table.&quot;)
        takeScreenshot(&quot;No_Filter_Success_With_Data&quot;)
    } else if (isElementPresent(noDataLocator)) {
        successMessage = &quot;&apos;No items to display&apos; message shown in &quot; + durationMicros + &quot; microseconds.&quot;
        WDS.log.info(&quot;SUCCESS: &apos;No data&apos; message was displayed, which is a valid outcome.&quot;)
        takeScreenshot(&quot;No_Filter_Success_No_Data&quot;)
    } else {
        throw new Exception(&quot;Wait completed, but neither data nor the &apos;no data&apos; message could be confirmed.&quot;)
    }
    
    WDS.sampleResult.setSuccessful(true)
    WDS.sampleResult.setResponseMessage(successMessage)
    
} catch (Exception e) {
    takeScreenshot(&quot;No_Filter_FAILED&quot;)
    WDS.log.error(&quot;Sampler failed: &quot; + e.getMessage(), e)
    WDS.sampleResult.setSuccessful(false)
    WDS.sampleResult.setResponseMessage(&quot;Failure: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="SalesForce Load V2" enabled="false">
          <stringProp name="WebDriverSampler.script">// FINAL ROBUST SCRIPT - Correctly uses JavaScript clicks to bypass ALL UI interception issues.

WDS.log.info(&quot;Starting Salesforce Test Sampler&quot;)

// Import necessary classes
import org.openqa.selenium.By
import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration

// A generous 120-second timeout for the sandbox environment.
def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(120))
// Create a JavascriptExecutor instance to be reused
JavascriptExecutor js = (JavascriptExecutor) WDS.browser

try {
    // --- Step 1: Navigate and Login ---
    WDS.browser.get(&quot;https://testhealth-crm--fullsbx.sandbox.my.salesforce.com/&quot;)
    WDS.log.info(&quot;Navigated to Salesforce URL.&quot;)
    
    def usernameField = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;username&quot;)))
    usernameField.sendKeys(&quot;aqif_m_con@testhealthhub.org.fullsbx&quot;)
    WDS.browser.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;testHealth@1&quot;)
    WDS.browser.findElement(By.id(&quot;Login&quot;)).click()
    WDS.log.info(&quot;Login form submitted.&quot;)

    // --- Step 2: Navigate to Patient Data Tab ---
    WDS.log.info(&quot;Waiting for the Case Record Page to load...&quot;)
    def patientDataTabLocator = By.xpath(&quot;//div[contains(@class, &apos;slds-tabs_card&apos;)]//a[@data-label=&apos;Patient Data&apos;]&quot;)
    def patientDataTab = wait.until(ExpectedConditions.elementToBeClickable(patientDataTabLocator))
    patientDataTab.click()
    WDS.log.info(&quot;Clicked &apos;Patient Data&apos; tab.&quot;)

    // --- Step 3: Navigate to Authorizations Sub-Tab (using JS Click) ---
    def authorizationsSubTabLocator = By.xpath(&quot;//div[contains(@class, &apos;slds-tabs_card&apos;)]//a[@data-label=&apos;Authorizations&apos;]&quot;)
    def authorizationsSubTab = wait.until(ExpectedConditions.presenceOfElementLocated(authorizationsSubTabLocator))
    
    // *** THE DEFINITIVE FIX: Use a JavaScript click to prevent interception by the utility bar ***
    js.executeScript(&quot;arguments[0].click();&quot;, authorizationsSubTab)
    WDS.log.info(&quot;Clicked on &apos;Authorizations&apos; sub-tab using JavaScript.&quot;)

    // --- Step 4: Find the button, start the timer, and click (using JS Click) ---
    def applyFilterButtonLocator = By.xpath(&quot;//c-combined-authorization-data-l-w-c//button[text()=&apos;Apply Filter&apos;]&quot;)
    def applyFilterButton = wait.until(ExpectedConditions.presenceOfElementLocated(applyFilterButtonLocator))
    
    WDS.log.info(&quot;Found &apos;Apply Filter&apos; button. Starting timer and clicking now.&quot;)
    long startTime = System.nanoTime() 

    // *** Using a JavaScript click here as well for maximum stability ***
    js.executeScript(&quot;arguments[0].click();&quot;, applyFilterButton)
    
    // --- Step 5: Wait for data to appear and stop the timer ---
    def dataRowLocator = By.xpath(&quot;//lightning-datatable//tbody/tr[1]&quot;)
    wait.until(ExpectedConditions.visibilityOfElementLocated(dataRowLocator))
    
    long endTime = System.nanoTime()
    WDS.log.info(&quot;First row of data has appeared. Stopping timer.&quot;)
    
    // --- Step 6: Calculate and report the time ---
    long durationNanos = endTime - startTime
    long durationMicros = durationNanos / 1000
    
    WDS.log.info(&quot;------------------------------------------------------&quot;)
    WDS.log.info(&quot;Data load time after filter: &quot; + durationMicros + &quot; microseconds.&quot;)
    WDS.log.info(&quot;------------------------------------------------------&quot;)

    WDS.vars.put(&quot;dataLoadTimeMicros&quot;, String.valueOf(durationMicros))
    
    WDS.sampleResult.setSuccessful(true)
    WDS.sampleResult.setResponseMessage(&quot;Data loaded successfully in &quot; + durationMicros + &quot; microseconds.&quot;)
    
} catch (Exception e) {
    WDS.log.error(&quot;Script failed: &quot; + e.getMessage(), e)
    WDS.sampleResult.setSuccessful(false)
    WDS.sampleResult.setResponseMessage(&quot;Failure: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
